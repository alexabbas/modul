#     Sample = setNames(c("beige","red"),c("Biopsy","ctDNA"))
#   )
# )
visits = c("Tissue","C1D1IP","C1D1MP","ontx","PD","EOT") #unique(oapl$Visit)
toHeatmap = as.matrix(oaplPathwayWide[,visits])
class(toHeatmap) = "character"
rownames(toHeatmap) = paste(oaplPathwayWide$SUBJECT.ID,oaplPathwayWide$variant)
heatmapPatients = oaplPathwayWide$SUBJECT.ID
toHeatmap[!is.na(toHeatmap)] = "Mut"
toHeatmap[is.na(toHeatmap)] = "WT"
patientVisits = unlist(ospl %>% mutate(patientVisits = paste(SUBJECT.ID,Visit)) %>% select(patientVisits))
for (visit in visits) {
for (i in 1:dim(toHeatmap)[1]) {
patient = heatmapPatients[i]
rowname = rownames(toHeatmap)[i]
if (!(paste(patient,visit) %in% patientVisits)) {
toHeatmap[rowname,visit] = "no data" }
}
}
genotypeColors = structure(c("brown","darkseagreen","white"), names = c("Mut", "WT", "no data")) # black, red, green, blue
varHeatmapDat = data.frame(
oaplPathwayWide %>% select(SUBJECT.ID,Arm,Response,GENE,variant),
toHeatmap
)
combineGenotypes = function(genotypes) {
if (any(genotypes == "no data") & !all(genotypes == "no data")) { stop("Genotype combination error.") }
ifelse(any(genotypes == "Mut"),"Mut","WT")
}
subjWide = varHeatmapDat %>%
pivot_longer(Tissue:EOT, names_to = "Visit", values_to = "Genotype") %>%
select(-variant) %>%
arrange(desc(Genotype)) %>%
group_by(GENE, SUBJECT.ID, Arm, Visit, Response) %>%
summarize(Genotype = combineGenotypes(Genotype)) %>%
ungroup() %>%
pivot_wider(names_from = Visit, values_from = Genotype)
rowAnnotDf = data.frame(subjWide %>% select(GENE,Arm,Response))
leftAnnot = rowAnnotation(
df = rowAnnotDf,
col = list(
GENE = setNames(rainbow(length(intersect(unique(rowAnnotDf$GENE),pathwayGenes))),unique(rowAnnotDf$GENE)),
Arm = setNames(c("darkslateblue","gray70","cadetblue2"),unique(rowAnnotDf$Arm)),
Response = setNames(c("#55DD44","#44DD55","#CC4455","#AA55AA"),c("CR","PR","PD","SD"))
)
)
toHeatmap = as.matrix(subjWide[,visits])
# class(toHeatmap) = "character"
# rownames(toHeatmap) = paste(subjWide$SUBJECT.ID)
# toHeatmap[!is.na(toHeatmap)] = "Mut"
# toHeatmap[is.na(toHeatmap)] = "WT"
#
# heatmapPatients = subjWide$SUBJECT.ID
#
# for (visit in visits) {
#   for (i in 1:dim(toHeatmap)[1]) {
#     patient = heatmapPatients[i]
#     rowname = rownames(toHeatmap)[i]
#     if (!(paste(patient,visit) %in% patientVisits)) {
#       toHeatmap[i,visit] = "no data" }
#   }
# }
# toHeatmap = toHeatmap[,c("Tissue","C1D1IP","C1D1MP","ontx","PD","EOT")]
Heatmap(toHeatmap,left_annotation=leftAnnot,cluster_rows = F,cluster_columns = F,
row_split = rowAnnotDf$GENE,
column_split = c("Biopsy","ctDNA","ctDNA","ctDNA","ctDNA","ctDNA"),
row_title_rot = 0, col = genotypeColors, name = "Genotype")
combineGenotypes = function(genotypes) {
if (any(genotypes == "no data"))
if (all(genotypes == "no data")) {
return ("no data")
} else {
stop("Genotype combination error.")
}
ifelse(any(genotypes == "Mut"),"Mut","WT")
}
subjWide = varHeatmapDat %>%
pivot_longer(Tissue:EOT, names_to = "Visit", values_to = "Genotype") %>%
select(-variant) %>%
arrange(desc(Genotype)) %>%
group_by(GENE, SUBJECT.ID, Arm, Visit, Response) %>%
summarize(Genotype = combineGenotypes(Genotype)) %>%
ungroup() %>%
pivot_wider(names_from = Visit, values_from = Genotype)
rowAnnotDf = data.frame(subjWide %>% select(GENE,Arm,Response))
leftAnnot = rowAnnotation(
df = rowAnnotDf,
col = list(
GENE = setNames(rainbow(length(intersect(unique(rowAnnotDf$GENE),pathwayGenes))),unique(rowAnnotDf$GENE)),
Arm = setNames(c("darkslateblue","gray70","cadetblue2"),unique(rowAnnotDf$Arm)),
Response = setNames(c("#55DD44","#44DD55","#CC4455","#AA55AA"),c("CR","PR","PD","SD"))
)
)
toHeatmap = as.matrix(subjWide[,visits])
# class(toHeatmap) = "character"
# rownames(toHeatmap) = paste(subjWide$SUBJECT.ID)
# toHeatmap[!is.na(toHeatmap)] = "Mut"
# toHeatmap[is.na(toHeatmap)] = "WT"
#
# heatmapPatients = subjWide$SUBJECT.ID
#
# for (visit in visits) {
#   for (i in 1:dim(toHeatmap)[1]) {
#     patient = heatmapPatients[i]
#     rowname = rownames(toHeatmap)[i]
#     if (!(paste(patient,visit) %in% patientVisits)) {
#       toHeatmap[i,visit] = "no data" }
#   }
# }
# toHeatmap = toHeatmap[,c("Tissue","C1D1IP","C1D1MP","ontx","PD","EOT")]
Heatmap(toHeatmap,left_annotation=leftAnnot,cluster_rows = F,cluster_columns = F,
row_split = rowAnnotDf$GENE,
column_split = c("Biopsy","ctDNA","ctDNA","ctDNA","ctDNA","ctDNA"),
row_title_rot = 0, col = genotypeColors, name = "Genotype")
toHeatmap
ospl
colnames(ospl)
ospl = bind_rows(
liqOspl %>% select(SUBJECT.ID,Visit),
tissueOspl %>% mutate( Visit = "Tissue", SUBJECT.ID = as.character(SUBJECT.ID) )
#  tissueOapl %>% select(SUBJECT.ID) %>% unique() %>% mutate(Visit = "Tissue")
) left_join(
ospl = bind_rows(
liqOspl %>% select(SUBJECT.ID,Visit),
tissueOspl %>% mutate( Visit = "Tissue", SUBJECT.ID = as.character(SUBJECT.ID) )
#  tissueOapl %>% select(SUBJECT.ID) %>% unique() %>% mutate(Visit = "Tissue")
) %>% left_join(
patientData
)
ospl = bind_rows(
liqOspl %>% select(SUBJECT.ID,Visit),
tissueOspl %>% mutate( Visit = "Tissue", SUBJECT.ID = as.character(SUBJECT.ID) )
#  tissueOapl %>% select(SUBJECT.ID) %>% unique() %>% mutate(Visit = "Tissue")
) %>% left_join(
patientData %>% mutate( SUBJECT.ID = as.character(SUBJECT.ID) )
)
colnames(ospl)
View(ospl)
ospl = bind_rows(
liqOspl,
tissueOspl %>% mutate( Visit = "Tissue", SUBJECT.ID = as.character(SUBJECT.ID) )
#  tissueOapl %>% select(SUBJECT.ID) %>% unique() %>% mutate(Visit = "Tissue")
) %>% left_join(
patientData %>% mutate( SUBJECT.ID = as.character(SUBJECT.ID) )
)
ospl = bind_rows(
liqOspl %>% mutate( SAMPLE.ID = as.character(SAMPLE.ID) ),
tissueOspl %>% mutate( Visit = "Tissue", SUBJECT.ID = as.character(SUBJECT.ID) )
#  tissueOapl %>% select(SUBJECT.ID) %>% unique() %>% mutate(Visit = "Tissue")
) %>% left_join(
patientData %>% mutate( SUBJECT.ID = as.character(SUBJECT.ID) )
)
850 * 9
36 * 48
36 * 48 / 25
70 / 6
25/3.29
8*3.29
25/3
100/1.5
100/12
100/1.15
78 / 12
88 / 12
133302/29326
29326/133302
81/17
r2v = function(r) {
4//3*pi*r^3
}
4/3*pi*r^3
r2v = function (radius) {
4/3*pi*radius^3
}
r2v(20) / r2v(60)
r2v(60) / r2v(20)
60/20*8
27+14+9
17705-8867.50
45*3
35*4
135+79
214-140
30+30+48+48
install.packages("ggpubr")
#library(stringr)
library(ggpubr)
#library(stringr)
library(ggpubr)
install.packages("car")
wordleLetterMat = rbind(lapply(wordleWords,strsplit))
unixWords = scan("/usr/share/dict/words", what = "character")
wordleWords = scan("~/Google Drive/My Drive/etc/wordle/wordleWords.txt")
wordleWords = scan("~/Google Drive/My Drive/etc/wordle/wordleWords.txt", what = "character")
wordleLetterMat = rbind(lapply(wordleWords,strsplit))
wordleLetterMat = rbind(lapply(wordleWords, function(x) { strsplit(x, "") } ))
wordleLetterMat
strsplit("ASFJI", "")
wordleLetterMat = rbind(lapply(wordleWords, function(x) { strsplit(x, "")[[1]] } ))
wordleLetterMat
strsplit(x, "")[[1]]
strsplit("ASFJI", "")[[1]]
a = strsplit("ASFJI", "")[[1]]
str(a)
wordleLetterMat = do.call( rbind,
lapply(wordleWords, function(x) { strsplit(x, "")[[1]] } )
)
library(tidyverse)
wordleLetterMat = do.call( bind_rows,
lapply(wordleWords, function(x) { strsplit(x, "")[[1]] } )
)
wordleLetterMat = do.call( rbind,
lapply(wordleWords, function(x) { data.frame(strsplit(x, "")[[1]]) } )
)
wordleLetterMat
wordleLetterMat = do.call( cbind,
lapply(wordleWords, function(x) { strsplit(x, "")[[1]] } )
)
wordleLetterMat = matrix(
unlist(
lapply(wordleWords, function(x) { strsplit(x, "")[[1]] } )
),
ncol = 5
)
unlist(
lapply(wordleWords, function(x) { strsplit(x, "")[[1]] } )
)
wordleLetterMat = matrix(
unlist(
lapply(wordleWords, function(x) { strsplit(x, "")[[1]] } )
),
ncol = 5
)
wordleLetterMat
wordleLetterMat = matrix(
unlist(
lapply(wordleWords, function(x) { strsplit(x, "")[[1]] } )
),
nrow = 5
)
head(wordleLetterMat)
wordleLetterMat = t(matrix(
unlist(
lapply(wordleWords, function(x) { strsplit(x, "")[[1]] } )
),
nrow = 5
))
head(wordleLetterMat)
wordlePosCounts = apply(wordleLetterMat,2,table)
wordlePosCounts
wordleLetters = unlist(
lapply(wordleWords, function(x) { strsplit(x, "")[[1]] } )
)
wordleCounts = table(wordleLetters)
wordleCounts
scoreWord = function(query) {
querySplit = strsplit(query,"")[[1]]
sapply(c(1:5),function(i) { wordlePosCounts[[i]][querySplit[i]] }) * 2 +
wordleCounts[querySplit[i]]
}
scoreWord("STRAP")
query = "STRAP"
querySplit = strsplit(query,"")[[1]]
sapply(
c(1:5), function(i) {
wordlePosCounts[[i]][querySplit[i]]
}
)
scoreWord = function(query) {
querySplit = strsplit(query,"")[[1]]
sum(
sapply(
c(1:5),
function(i) {
wordlePosCounts[[i]][querySplit[i]]
}
) * 2 + wordleCounts[querySplit[i]]
)
}
scoreWord("STRAP")
scoreWord = function(query) {
querySplit = strsplit(query,"")[[1]]
sum(
sapply(
c(1:5),
function(i) {
wordlePosCounts[[i]][querySplit[i]] * 2 +
wordleCounts[querySplit[i]]
}
)
)
}
scoreWord("STRAP")
scoreWord("AQXTR")
scoreWord("JQQQQ")
scoreWord("JQQQA")
scoreWord("JQQQwordlePosCountsA")
wordlePosCounts
wordleLetterMat
sapply(wordlePosCounts,function(x) {
missingLetters = setdiff(c(A:Z),names(x))
toFill = setNames(0, missingLetters)
})
missingLetters = setdiff(LETTERS,names(x))
wordlePosCounts
a = wordlePosCounts[[1]]
names(a)
x = wordlePosCounts[[1]]
missingLetters = setdiff(LETTERS,names(x))
missingLetters
toFill = setNames(0, missingLetters)
toFill
wordlePosCountsFilled = sapply(wordlePosCounts,function(x) {
missingLetters = setdiff(LETTERS,names(x))
toFill = setNames(0, missingLetters)
c(x,toFill)
})
wordlePosCountsFilled = sapply(wordlePosCounts,function(x) {
missingLetters = setdiff(LETTERS,names(x))
toFill = setNames(rep(0,times=length(missingLetters)), missingLetters)
c(x,toFill)
})
wordlePosCountsFilled
wordlePosCountsFilled = lapply(wordlePosCounts,function(x) {
missingLetters = setdiff(LETTERS,names(x))
toFill = setNames(rep(0,times=length(missingLetters)), missingLetters)
c(x,toFill)
})
wordlePosCountsFilled
wordlePosCounts = lapply(wordlePosCounts,function(x) {
missingLetters = setdiff(LETTERS,names(x))
toFill = setNames(rep(0,times=length(missingLetters)), missingLetters)
c(x,toFill)
})
unixFives = unixWords[nchar(unixWords)==5]
scores = sapply(unixFives,scoreWord)
scores
unixFives = toupper(grep("^[a-z]",unixFives))
unixFives
unixFives = unixWords[nchar(unixWords)==5]
unixFives = toupper(grep("^[a-z]",unixFives,value=T))
unixFives
scores = sapply(unixFives,scoreWord)
scores
scores = sort(scores,decreasing = T)
scores[1:20]
table(strsplit(unixFives[1:10]))
table(strsplit(unixFives[1:10],""))
unixFives[1:10]
strsplit("",unixFives[1:10])
strsplit(unixFives[1:10],"")
strsplit(unixFives[1:10],"")
sapply(strsplit(unixFives[1:10],""),table)
?every
?each
?all
unixFives = unixFives[
sapply(
strsplit(unixFives,""), function(x) all(table(x)==1)
)
]
head(unixFives)
scores = sapply(unixFives,scoreWord)
scores = sort(scores,decreasing = T)
scores[1:20]
library(tidyverse)
library(spotifyr)
library(httpuv)
clientid = "1e3e367c14764614b74fd97888444a27"
clientsecret = "a8ea7e8f974349efaea5fdda89603a9e"
Sys.setenv(SPOTIFY_CLIENT_ID = clientid)
Sys.setenv(SPOTIFY_CLIENT_SECRET = clientsecret)
access_token <- get_spotify_access_token()
my_id = "alexanderabbas"
all_plists <- get_user_playlists(my_id, limit = 50)#,authorization = access_token)
my_plists = all_plists %>% filter(owner.id == "alexanderabbas")
tracks <- apply(my_plists, 1, function(plist) {
get_playlist_tracks(plist["id"],fields = c("track.name","track.id","track.album.name","name")) %>% mutate(playlist = plist$name)
})
tracksDat <- bind_rows(tracks) %>% filter(!is.na(track.id))
head(tracksDat)
trackColClasses <- lapply(tracksDat,class)
trackLists <- names(trackColClasses[trackColClasses=="list"])
tracksDat <- tracksDat %>% select(-!!trackLists)
tracksDat = tracksDat[colSums(!is.na(tracksDat)) > 0]
a = tracksDat %>% select(track.name) %>% unlist() %>% table()
sort(a[a>1])
grep("ffee",a,value=T)
grep("adio",a,value=T)
grep("active",a,value=T)
grep("adio",names(a),value=T)
grep("ffee",names(a),value=T)
str(a)
tracks <- apply(my_plists, 1, function(plist) {
get_playlist_tracks(plist["id"],fields = c("track.name","track.id","track.album.name","name")) %>% mutate(playlist = plist$name)
})
tracksDat <- bind_rows(tracks) %>% filter(!is.na(track.id))
idChunks = split(tracksDat$track.id, ceiling(seq_along(tracksDat$track.id)/50))
getArtistChunk = function(someIds) {
res = get_tracks(someIds)$artists
sapply(res,function(x) { x[1,"name"] } )
}
artistChunks = sapply(idChunks,getArtistChunk)
artistVec = unlist(artistChunks)
tracksDat = tracksDat %>% mutate(artist = artistVec)
trackColClasses <- lapply(tracksDat,class)
trackLists <- names(trackColClasses[trackColClasses=="list"])
tracksDat <- tracksDat %>% select(-!!trackLists)
tracksDat = tracksDat[colSums(!is.na(tracksDat)) > 0]
a = tracksDat %>% select(track.name) %>% unlist() %>% table()
grep("adio",names(a),value=T)
528+490
82/219*100
12/26*100
108/388*100
100-28
grep("t know",names(a),value=T)
grep("know",names(a),value=T)
a
grep("know",case=F,names(a),value=T)
?grep
grep("know",ignore.case=F,names(a),value=T)
head(tracksDat)
my_id = "alexanderabbas"
all_plists <- get_user_playlists(my_id, limit = 50)#,authorization = access_token)
my_plists = all_plists %>% filter(owner.id == "alexanderabbas")
tracks <- apply(my_plists, 1, function(plist) {
get_playlist_tracks(plist["id"],fields = c("track.name","track.id","track.album.name","name")) %>% mutate(playlist = plist$name)
})
tracksDat <- bind_rows(tracks) %>% filter(!is.na(track.id))
idChunks = split(tracksDat$track.id, ceiling(seq_along(tracksDat$track.id)/50))
getArtistChunk = function(someIds) {
res = get_tracks(someIds)$artists
sapply(res,function(x) { x[1,"name"] } )
}
artistChunks = sapply(idChunks,getArtistChunk)
artistVec = unlist(artistChunks)
tracksDat = tracksDat %>% mutate(artist = artistVec)
trackColClasses <- lapply(tracksDat,class)
trackLists <- names(trackColClasses[trackColClasses=="list"])
tracksDat <- tracksDat %>% select(-!!trackLists)
tracksDat = tracksDat[colSums(!is.na(tracksDat)) > 0]
tracksTable = tracksDat %>% select(track.name) %>% unlist() %>% table()
duplicateTracks = sort(tracksTable[tracksTable>1])
head(duplicateTracks)
tracksDat$playlist %>% table()
tracksTable %>% filter(playlist == "Cool slice") %>% left_join(
data.frame(
track.name = names(duplicateTracks),
trackCount = duplicateTracks
)
)
tracksDat %>% filter(playlist == "Cool slice") %>% left_join(
data.frame(
track.name = names(duplicateTracks),
trackCount = duplicateTracks
)
)
likedPlaylists <- read.delim("/Volumes/GoogleDrive-116919193630903670642/My Drive/etc/music/spotify/playlistsLiked.txt",header = F)$V1
likedPlaylists <- read.delim("~/Google Drive (alexabbas@gmail.com)/etc/music/spotify/playlistsLiked.txt",header = F)$V1
likedPlTracksDf <- tracksDat %>% filter(playlist %in% likedPlaylists)
duplicateLikedTracks = table(likedPlTracksDf$track.name)
tracksDat %>% filter(playlist == "Cool slice") %>% left_join(
data.frame(
track.name = names(duplicateLikedTracks),
trackCount = duplicateLikedTracks
)
)
duplicateTracks["Doin' Time"]
tracksDat %>% filter(track.name == "Doin' Time")
tracksDat %>% filter(track.name == "Sex on Fire")
14536+7440
25/87*250000
585 + 15*4
645/2
70/12
3737.10 - 1500
2237.1 / 2
1868.55-1118.55
350*2000
350*2121
350*1721
135*.25
322.50 + 9.19
322.50 + 9.19
163+132-156
15422
15422/2
2.83/.68
2.79/.68
2.55/.68
shiny::runApp('Google Drive (alexabbas@gmail.com)/GNE/MODUL/shiny/MODUL')
runApp('Google Drive (alexabbas@gmail.com)/GNE/MODUL/shiny/MODUL')
runApp('Google Drive (alexabbas@gmail.com)/GNE/MODUL/shiny/MODUL')
runApp('Google Drive (alexabbas@gmail.com)/GNE/MODUL/shiny/MODUL')
runApp('Google Drive (alexabbas@gmail.com)/GNE/MODUL/shiny/MODUL')
a = table(oapl$gene)
head(oapl)
setwd("~/Google Drive (alexabbas@gmail.com)/GNE/MODUL/shiny/MODUL/")
oapl = read.csv("data/oapl.csv")
ospl = read.csv("data/ospl.csv")
a = table(oapl$GENE)
a[a>10]
a[a>20]
a[a>30]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
